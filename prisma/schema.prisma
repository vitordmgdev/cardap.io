  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model User {
    id              String       @id @default(uuid())
    username        String       @unique
    email           String       @unique
    password        String
    otpExpires      DateTime?
    otpCode         String?
    imageUrl        String?
    emailVerifiedAt DateTime?
    updatedAt       DateTime     @updatedAt
    createdAt       DateTime     @default(now())
    restaurants     Restaurant[]
  }

  model Restaurant {
    id               String            @id @default(uuid())
    userId           String
    name             String            @db.VarChar(50)
    coverImg         String?
    logoImg          String?
    slug             String            @unique @db.VarChar(50)
    description      String?           @db.Text
    createdAt        DateTime          @default(now())
    updatedAt        DateTime?         @updatedAt
    user             User              @relation(fields: [userId], references: [id])
    categories       Category[]
    orders           Order[]
    restaurantTables RestaurantTable[]
  }

  model Category {
    id           String     @id @default(uuid())
    restaurantId String
    name         String     @db.VarChar()
    active       Boolean    @default(true)
    updatedAt    DateTime   @updatedAt
    createdAt    DateTime   @default(now())
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    products     Product[]
  }

  model RestaurantTable {
    id           String       @id @default(uuid())
    restaurantId String
    tokenqr      String       @unique
    status       table_status @default(AVAILABLE)
    updatedAt    DateTime     @updatedAt
    createdAt    DateTime     @default(now())
    orders       Order[]
    restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  }

  model Product {
    id          String      @id @default(uuid())
    categoryId  String
    name        String      @db.VarChar()
    imageUrl String?
    price       Decimal     @db.Decimal(10, 2)
    description String?     @db.Text
    active      Boolean     @default(true)
    updatedAt   DateTime    @updatedAt
    createdAt   DateTime    @default(now())
    category    Category    @relation(fields: [categoryId], references: [id])
    orderItems  OrderItem[]
  }
  model Order {
    id              String          @id @default(uuid())
    restaurantId    String
    tableId         String
    status          order_status    @default(PENDING)
    updatedAt       DateTime        @updatedAt
    createdAt       DateTime        @default(now())
    restaurant      Restaurant      @relation(fields: [restaurantId], references: [id])
    restaurantTable RestaurantTable @relation(fields: [tableId], references: [id])
    orderItems      OrderItem[]
  }

  model OrderItem {
    id        String   @id @default(uuid())
    orderId   String
    productId String
    price     Decimal  @db.Decimal(10, 2)
    quantity  Int      @default(1)
    order     Order    @relation(fields: [orderId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
  }

  enum table_status {
    AVAILABLE
    OCCUPIED
    CLOSED
  }

  enum order_status {
    PENDING
    IN_PROGRESS
    COMPLETED
    CANCELED
    PAID
  }
